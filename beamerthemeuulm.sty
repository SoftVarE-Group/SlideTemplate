% =============================================
% MAIN uulm-THEME
% =============================================

% ---------------------------------------------
% import packages
% ---------------------------------------------
\usepackage[utf8]{inputenc}
\usepackage{xargs} % used to define/renew commands with multiple optional parameters
\usepackage{color}
\usepackage{fitbox} % used to auto-scale long frame titles
\usepackage{tcolorbox} % used for color boxes (definition, example, note)
\usepackage{ifthen}
\usepackage{multicol} % for auto multi-column in content overview
% ---------------------------------------------


% ---------------------------------------------
% general settings
% ---------------------------------------------
\beamertemplatenavigationsymbolsempty % remove the default navigation symbols

\graphicspath{{../pics/logos/}{../pics/uulm/}{../pics/nature/}}

\newif\ifsectiontitleslide % for enabling the automatic section title slide at the begin of each section
\newif\ifsectionoverview % for enabling the automatic section overview on the section title slide

\DeclareOption{nosectionframes}{\sectiontitleslidefalse \sectionoverviewfalse}
\DeclareOption{sectiontitleslides}{\sectiontitleslidetrue \sectionoverviewfalse}
\DeclareOption{sectionoverviews}{\sectiontitleslidetrue \sectionoverviewtrue}

\ExecuteOptions{sectiontitleslides} % use sectiontitleslides as default
\mode<handout>{\ExecuteOptions{sectionoverviews}} % use sectionoverviews as default in handout mode

\ProcessOptions

\setlength{\parskip}{1.5ex} % set the parskip
\newcommand{\@minipagerestore}{\setlength{\parskip}{1.5ex}} % use parskip also in minipages (also used for tcolorbox)
% ---------------------------------------------


% ---------------------------------------------
% colors
% ---------------------------------------------
% uulm color scheme:
\definecolor{black}{HTML}{000000}
\definecolor{uulmlogoblue}{HTML}{89a2b3}
\definecolor{uulmblue}{HTML}{7D9AAA}
\definecolor{uulmaccent}{HTML}{A9A28D}
\definecolor{green}{HTML}{56AA1C}
\definecolor{red}{HTML}{A32638}
\definecolor{orange}{HTML}{DF6D07}
\definecolor{blue}{HTML}{26547C}

% beamer colors:
\setbeamercolor{frametitle}{fg=black}
\setbeamercolor{myfooter}{fg=white,bg=uulmaccent}
\setbeamercolor{mypagenumber}{fg=white,bg=red}
\setbeamercolor{titlebox}{fg=white,bg=red}
\setbeamercolor{subtitlebox}{fg=white,bg=uulmaccent}
\setbeamercolor{logobox}{bg=white}
\setbeamercolor{section in toc}{fg=black}
\setbeamercolor{subsection in toc}{fg=black}

\newcommand{\setfaculty}[1]{
    \ifthenelse{\equal{#1}{med}}{\setbeamercolor{mypagenumber}{fg=white,bg=blue}\setbeamercolor{titlebox}{fg=white,bg=blue}}{
        \ifthenelse{\equal{#1}{infIngPsy}}{\setbeamercolor{mypagenumber}{fg=white,bg=red}\setbeamercolor{titlebox}{fg=white,bg=red}}{
            \ifthenelse{\equal{#1}{math}}{\setbeamercolor{mypagenumber}{fg=white,bg=green}\setbeamercolor{titlebox}{fg=white,bg=green}}{
                \ifthenelse{\equal{#1}{nat}}{\setbeamercolor{mypagenumber}{fg=white,bg=orange}\setbeamercolor{titlebox}{fg=white,bg=orange}}{}
            }
        }
    }
}
% ---------------------------------------------


% ---------------------------------------------
% fonts
% ---------------------------------------------
\setbeamerfont{frametitle}{size=\LARGE, series=\bfseries}
\setbeamerfont{section title}{size=\Huge, series=\bfseries}
\setbeamerfont{section in toc}{size=\large, series=\bfseries}

\setbeamerfont{itemize/enumerate subbody}{size=\normalsize}
\setbeamerfont{itemize/enumerate subsubbody}{size=\normalsize}
% ---------------------------------------------


% ---------------------------------------------
% list environments
% ---------------------------------------------
\setbeamercolor{item}{fg=black}
\setbeamertemplate{itemize items}[circle]
\setbeamertemplate{enumerate item}{\arabic{enumi}.}
\setbeamertemplate{enumerate subitem}{\arabic{enumii}.}
\setbeamertemplate{enumerate subsubitem}{\arabic{enumiii}.}
\setbeamertemplate{section in toc}[sections numbered]
% ---------------------------------------------


% ---------------------------------------------
% frame layout
% ---------------------------------------------
% [options for includegraphics]{logoname}
\newcommand*\institutelogo[2][]{\def\@institutelogo{\includegraphics[height=4.5ex,#1]{#2}}}
\newcommand*\clearinstitutelogo{\def\@institutelogo{}}
\newcommand*\universitylogo[2][]{\def\@universitylogo{\includegraphics[height=4.5ex,#1]{#2}}}
\newcommand*\clearuniversitylogo{\def\@universitylogo{}}
\def\@mainlogo{\@institutelogo\hskip0pt plus 1filll\relax\@universitylogo}
\newif\ifuulm@logos@first@
\newcommand*\uulmlogos[2][]{\def\@mainlogo{%
    \uulm@logos@first@true
    \@for\@image:={#2}\do{%
        \ifuulm@logos@first@\uulm@logos@first@false\else \hskip0pt plus 1filll\fi
        \ifthenelse{\equal{\@image}{}}{}{%
            \includegraphics[height=4.5ex,#1]{\@image}%
        }%
    }%
}}
% default for the university, after all, it is the layout of uulm
\universitylogo{uulm}
\clearinstitutelogo

\renewcommandx{\maketitle}[2][1=apr21-o25a,2=150]{
    {
    \def \picture {#1}
    \ifx \picture \empty \else \usebackgroundtemplate{\includegraphics[trim=0 0 0 #2,clip,width=\paperwidth]{#1}} \fi
    \begin{frame}[plain]
        \vskip0pt plus 1filll
        \begin{beamercolorbox}[wd=\paperwidth,ht=4.5ex,dp=2ex,right]{titlebox}
            \LARGE\textbf{\inserttitle}\hspace*{20pt}
        \end{beamercolorbox}%
        \nointerlineskip%
        \begin{beamercolorbox}[wd=\paperwidth,ht=2.25ex,dp=1ex,right]{subtitlebox}
            \small
            \ifx \insertsubtitle \empty \else \insertsubtitle\ $\vert$ \fi
            \insertauthor\
            \ifx \insertdate \empty \else $\vert$ \insertdate \fi
            \hspace*{20pt}
        \end{beamercolorbox}%
        \nointerlineskip
        \begin{beamercolorbox}[wd=\paperwidth,ht=4.5ex,dp=2ex,left]{logobox}
            \vspace{-1ex}%
            \hspace{10pt}
            \@mainlogo
            \hspace{10pt}
        \end{beamercolorbox}%
    \end{frame}
    }
}

\setbeamertemplate{frametitle}{
    \vspace{20pt}%
    \fitbox[maxheight=2.5ex,minheight=0pt,maxwidth=\textwidth,minwidth=0pt]{%
        \vphantom{/}\insertframetitle{}%
    }%
}

\setbeamertemplate{footline}{
    \hypersetup{linkcolor = white}
    \hbox{%
        \begin{beamercolorbox}[wd=0.93\textwidth,ht=3mm,dp=1.5mm,left]{myfooter}
            \hspace{0.03\textwidth}
            \insertshortauthor
            \hfill
            \insertshorttitle\
            \ifx \insertsubtitle \empty \else {-- \insertshortsubtitle} \fi
            \ifx \insertsectionhead \empty \else {-- \thesection.~\insertsectionhead} \fi
            \hspace{0.03\textwidth}
        \end{beamercolorbox}%
        \begin{beamercolorbox}[wd=0.07\textwidth,ht=3mm,dp=1.5mm,center]{mypagenumber}
            \insertframenumber
        \end{beamercolorbox}%
    }%
}
% ---------------------------------------------


% ---------------------------------------------
% table of contents
% ---------------------------------------------
\ifsectiontitleslide
\AtBeginSection{
    \ifsectionoverview
    \begin{frame}{\thesection.~\insertsection}
        \linespread{.5}
        \vfill
        \tableofcontents[currentsection,hideothersubsections]
    \end{frame}
    \else
    \begin{frame}
        \usebeamerfont{section title}\textbf{\thesection.~\insertsection}
    \end{frame}
    \fi
}
\fi

\newcommand{\contentoverview}{
    \begin{frame}{\inserttitle}
        \linespread{.5}
        \vfill
        \begin{multicols}{2}
            \tableofcontents
        \end{multicols}
    \end{frame}
}

\newcommand{\lectureoverview}{\contentoverview} % deprecated version of \contentoverview, do not use anymore
% ---------------------------------------------


% ---------------------------------------------
% content layout
% ---------------------------------------------
\newcommand{\halfpage}[1]{\partofpage{48}{#1}}

\newcommand{\thirdpage}[1]{\partofpage{31}{#1}}

\usepackage{adjustbox}
\newcommand{\partofpage}[2]{
	\begin{minipage}{0.#1\textwidth}
			\begin{flushleft}
				#2
			\end{flushleft}
	\end{minipage}
}

% corresponds to '\halfpage', however, with the new columns we could use larger values
% (same for thirdnext)
\def\halfnext{.489\textwidth}
% corresponds to '\thirdpage'
\def\thirdnext{.31\textwidth}

\newcommand\leftandright[2]{%
    \halfpage{#1}%
    \hfill
    \halfpage{#2}%
}

\newcommand\leftmiddleandright[3]{%
    \thirdpage{#1}%
    \hfill
    \thirdpage{#2}%
    \hfill
    \thirdpage{#3}%
}

\newcommand\leftthenright[2]{%
    \halfpage{#1}%
    \hfill
    \onslide<2->{\halfpage{#2}}%
}

\newcommand\rightthenleft[2]{
    \onslide<2->{\halfpage{#1}}
    \hfill
    \halfpage{#2}
}

\newcommand\leftmiddlethenright[3]{%
    \thirdpage{#1}%
    \hfill
    \onslide<2->{\thirdpage{#2}}%
    \hfill
    \onslide<3->{\thirdpage{#3}}%
}

\newcommand\rightmiddlethenleft[3]{%
    \onslide<3->{\thirdpage{#1}}%
    \hfill
    \onslide<2->{\thirdpage{#2}}%
    \hfill
    \thirdpage{#3}%
}

\newif\ifrecording % for enabling or disabling recording mode

\newcommand\leftorright[2]{% only works in recording mode
\ifrecording
    \onslide<1>{\halfpage{#1}}%
    \onslide<2>{\hfill}%
    \onslide<3>{\halfpage{#2}}%
\else
    \leftthenright{#1}{#2}%
\fi
}

\newcommand\rightorleft[2]{% only works in recording mode
\ifrecording
    \onslide<3>{\halfpage{#1}}%
    \onslide<2>{\hfill}%
    \onslide<1>{\halfpage{#2}}%
\else
    \rightthenleft{#1}{#2}%
\fi
}

\newcommand\leftmiddleorright[3]{% only works in recording mode
\ifrecording
    \onslide<1>{\thirdpage{#1}}%
    \onslide<2>{\hfill}%
    \onslide<3>{\thirdpage{#2}}%
    \onslide<4>{\hfill}%
    \onslide<5>{\thirdpage{#3}}%
\else
    \leftmiddlethenright{#1}{#2}{#3}%
\fi
}

\newcommand\rightmiddleorleft[3]{% only works in recording mode
\ifrecording
    \onslide<5>{\thirdpage{#1}}%
    \onslide<4>{\hfill}%
    \onslide<3>{\thirdpage{#2}}%
    \onslide<2>{\hfill}%
    \onslide<1>{\thirdpage{#3}}%
\else
    \rightmiddlethenleft{#1}{#2}{#3}%
\fi
}

% here, we configure the defaults
\def\uulm@cols@extra{} % no extra options for the columns environment
% init | step
\def\uulm@cols@animation#1#2{%
    % defines the increment for each step (always positive)
    % you can supply a step greater than 0, allowing for 'empty-animations' between the columns
    \def\uulm@cols@anim@step{#1}%
    % '-' for keep, '' (empty) for forget
    \def\uulm@cols@anim@suff{#2}%
}
\def\uulm@cols@anim@init{1}     % start on the first column
\def\uulm@cols@anim@step@sign{+}% count up (if there is anything to count)
\newdimen\uulm@cols@total@width % holds the column width
\newdimen\uulm@cols@margin      % holds the margin in-between columns
\def\uulm@cols@widths@max{100}  % the maximum number to be used for widths
% with this, we define the keys that are usable within the optional argument of '\mycolumns'
\pgfqkeys{/uulm columns}{
  % search also allows to write 'c' instead of 'align/c' etc.
  /uulm columns/.search also = {/uulm columns/align, /uulm columns/extras},
  align/c/.code              = \def\uulm@cols@valign{c}, % centered
  align/t/.code              = \def\uulm@cols@valign{t}, % top (baseline)
  align/b/.code              = \def\uulm@cols@valign{b}, % bottom (baseline)
  align/T/.code              = \def\uulm@cols@valign{T}, % top (with height, that is, aligns to the "very-top")
  % with 'width' the user can set the total width to be occupied by the columns
  width/.code                = \setlength\uulm@cols@total@width{#1},
  % define the margin between columns
  margin/.code               = \setlength\uulm@cols@margin{#1},
  % widths={30,20} will give the first column 30%, the next 20%, and the rest (if any) an even share of the remaining 50%
  widths/.code               = \def\uulm@cols@widths{#1},
  % this key is only for users who need to change anything for the underlying columns mechanism
  extra/columns/.code        = \def\uulm@cols@extra{#1},
  % control the number of columns
  columns/.code              = \def\uulm@cols@count{#1},
  % allow for 'animation=...'
  animation/.is choice,
  % similar to 'then'
  animation/keep/.code       = \uulm@cols@animation{1}{-},
  % similar to 'or', but ifrecording is no longer needed
  animation/forget/.code     = \uulm@cols@animation{1}{},
  % no animation, show all
  animation/none/.code       = \uulm@cols@animation{0}{-},
  % comfort variants, just so the user does not have to write 'animation='
  keep/.style                = {animation=keep},
  forget/.style              = {animation=forget},
  % deliberately not offer a comfort-variant for the default (none)
  % reverse animation order by setting the initial animation to the amount of columns and making the step (animation delta
  % per column) negative (\uulm@cols@anim@step@sign controls if the animation goes up (+) or down (-))
  reverse/.code              =  \def\uulm@cols@anim@init{\uulm@cols@count}\def\uulm@cols@anim@step@sign{-},
  % by overwriting the style '/uulm columns/@defaults',
  % the user can change these defaults
  @defaults/.style           = {
    c, % center align
    columns = 2, animation=none, % one column, no animation
    widths = {}, % use default widths (evenly distribute)
    % we could also use the default columnsep of latex,
    % this number was merly chosen to look visually pleasing
    margin = 0.035\linewidth,
    width = \linewidth
  }
}

% allows to user to overwrite the defaults
\newcommand\setmycolumnsdefault[1]{\pgfqkeys{/uulm columns}{@defaults/.append style={#1}}}

% we need two counters
% 'uulm@cols@current' holds the column we are currently in (starts with 0)
\newcounter{uulm@cols@current}
% 'uulm@cols@currentanim' holds the slide the current column should appear on
\newcounter{uulm@cols@currentanim}
% 'uulm@cols@current' will increment by 1 for each column
% 'uulm@cols@currentanim' may increment similarly (animation without reverse)
% ...                     may decrement by 1      (animation with reverse)
% ...                     may remain constant     (without animation)

% code to be executed at the start of the columns
\newcommand\uulm@cols@init{%
    % reset the counter for the current column
    \setcounter{uulm@cols@current}{0}%
    % initialize the current animation counter with the start animation
    % this is 1 without reverse, and the number of columns if reverse is active
    \setcounter{uulm@cols@currentanim}{\uulm@cols@anim@init}%
    % due to the way beamer calculates the columns, we remove the margin from the width
    % see etoolbox for an explanation of '\dimdef' (basically allows for calculations with dimensions)
    \dimdef{\uulm@cols@total@width}{\linewidth-\uulm@cols@margin*\uulm@cols@count+\uulm@cols@margin}%
    % activate(/overwrite) the '\mynextcolumn' macro within the environment
    \let\mynextcolumn\uulm@mynextcolumn
    % a rather complicated macro, which sets/calculates the widths for all columns
    \uulm@cols@initialize@widths
    % issue the first column
    % NOTE: we don't guard if 'columns' is below 1 (e.g. we always assume, there is 1 column)
    \mynextcolumn
}

% a temporary counter so we do not need to use low-level tex counters (like @tempcnta)
% with '\value{uulm@cols@temp}' we get the numerical value of the counter
% with '\arabic{uulm@cols@temp}' we get the (textual) "number"-value of the counter
\newcounter{uulm@cols@temp}

% the only thing important by this macro are other commands sequences:
% \uulm@cols@col@0, \uulm@cols@col@1, \uulm@cols@col@2, ...
% which hold the total width, column with number 0, 1, 2, ... should occupy
% it uses the total number of columns, the supplied total width of all columns
% and the desired 'widths={...}'. If there are more columns (e.g. widths={30}, columns=3)
% it will automatically distributed the remaining space evenly.
% note, that while we assume the units of 'widths' to be percentages, it is really the
% macro '\uulm@cols@widths@max' which holds the number they should sum up to (i.e. 100)
\newcommand\uulm@cols@initialize@widths{%
    % first of all, we iterate over the given 'widths={...}' (stored within \uulm@cols@widths)
    % we use 'uulm@cols@temp' to count the number of widths supplied
    \setcounter{uulm@cols@temp}{0}%
    % The macro '\uulm@cols@widths@max' holds the desired target which all the supplied widths should sum up to it is
    % probably 100 (therefore, supplying widths={20,10}, would reduce '\uulm@cols@remaining@width' from 100 to 70)
    \let\uulm@cols@remaining@width\uulm@cols@widths@max
    % now we use '@for' which iterates over all widths (comma-separated) stored in '\uulm@cols@widths'
    % the loop variable '\@uulm@cols@width' will hold the current width in each loop
    \@for\@uulm@cols@width:=\uulm@cols@widths\do{%
        % with 'protected@csedef' we (in short) define a new macro but supply its name in terms of another macro
        % this macro name can contain numbers etc.
        % essential, we define '\uulm@cols@col@<current column>' that is, 'widths={20,30}' would create:
        % \uulm@cols@col@0, which holds the calculated value for 20
        % \uulm@cols@col@1, which holds the calculated value for 20
        % See the etoolbox package for an explanation of '\csdimdef'
        \csdimdef{uulm@cols@col@\arabic{uulm@cols@temp}}{%
            % We make math on dimensions. Essentially, we calculate the total width to be occupied
            % by those column (i.e. translating from the percentages of 'widths' to the real dimension)
            \uulm@cols@total@width*\@uulm@cols@width/\uulm@cols@widths@max
            % Example:
            % with '\uulm@cols@total@width' being probably something like '\linewidth' and '\uulm@cols@widths@max' being 100
            % this can be read as: '\linewidth * \@uulm@cols@width/100'
            % Suppose, the current '\@uulm@cols@width' is 20, this would result in '\linewidth * 0.2' or "20% of the width of the line"
        }%
        % now we update the amount of widths left (e.g., when we have '\uulm@cols@remaining@width' as 100 and a '\@uulm@cols@width' of 20,
        % this will reduce the remaining number to 80). See etoolbox for an explanation of numdef
        \numdef\uulm@cols@remaining@width{\uulm@cols@remaining@width-\@uulm@cols@width}%
        % step the counter to move to the width for the next column
        \stepcounter{uulm@cols@temp}%
        % check, if we have too many columns
        \ifnum\value{uulm@cols@temp}>\uulm@cols@count\relax
            \PackageWarning{beamerthemeuulm}{You specified '\uulm@cols@count' columns, but supplied more lengths to widths (\uulm@cols@widths) (page: \thepage, frame: \insertframenumber,\on@line). Reduce the amount of widths supplied or increase the number of columns}%
        \fi
    }%
    % after processing all 'widths={...}' we check, if the user supplied (in sum) more than we have 'e.g., when having percentages (with 100)
    % supplying 'widths={90,20}' would issue this error as we now have a '110%' column
    \ifnum\uulm@cols@remaining@width<0\relax
        \PackageWarning{beamerthemeuulm}{Widths (\uulm@cols@widths) sum up to more than the allowed max '\uulm@cols@widths@max' (page: \thepage, frame: \insertframenumber,\on@line). Please update the supplied widths.}%
    \fi
    % for the remaining columns, distribute remaining width evenly
    % if the user supplied 'columns=5' (stored in \uulm@cols@count) and 'widths={15,30}',
    % this will set '\@uulm@cols@remaining@cols' to 3.
    \edef\@uulm@cols@remaining@cols{\the\numexpr\uulm@cols@count-\value{uulm@cols@temp}}%
    % NOTE: maybe we should notify the user of the even distribution?
    % we only do something, if there is at least one column that the user supplied no width
    \ifnum\@uulm@cols@remaining@cols>0
        % we distribute the width evenly. therefore we calculate the width that remains for each column
        % if there are 60%, and 3 columns remaining, we give each '\uulm@cols@total@width * 0.2' or 20%
        % of the total column width.
        \dimdef\@uulm@cols@remaining@colwidth{%
            \uulm@cols@total@width*%
                % this part of the expression basically calculates the percentage (20%...)
                \uulm@cols@remaining@width/\uulm@cols@widths@max/\@uulm@cols@remaining@cols%
        }%
        % now, we use a while loop to iterate over the remaining columns
        \@whilenum\value{uulm@cols@temp}<\uulm@cols@count\do{% 'while(i < #columns) { ... }
            % we define the '\uulm@cols@col@<current column>'
            % macros holding the width. With 60%, a total width of '\linewidth'
            % and three out of 5 columns remaining, this would define:
            % \uulm@cols@col@2, which holds \linewidth*0.2
            % \uulm@cols@col@3, which holds \linewidth*0.2
            % \uulm@cols@col@4, which holds \linewidth*0.2
            \csedef{uulm@cols@col@\arabic{uulm@cols@temp}}{\@uulm@cols@remaining@colwidth}%
            % increment the counter
            \stepcounter{uulm@cols@temp}% i += 1
        }%
    \fi
}

% this is the macro, that will become '\mynextcolumn' within the 'mycolumns' environment
\newcommand\uulm@mynextcolumn{%
    % issue a warning if too many columns
    \ifnum\value{uulm@cols@current}<\uulm@cols@count\else
        % this mus be an error, we calculate widths etc. only for the given columns
        \PackageError{beamerthemeuulm}{You configured 'columns=\uulm@cols@count', but supplied more (at least \arabic{uulm@cols@current}, page: \thepage, frame: \insertframenumber,\on@line).}{Either remove the command, or choose another Layout}%
    \fi
    % this is a debug statement, that can be used to se the current state within the animation
    % \typeout{Creating col: \the\c@uulm@cols@current\space on slide: \the\c@uulm@cols@currentanim\uulm@cols@anim@suff, page: \thepage\space (width: \csuse{uulm@cols@col@\number\c@uulm@cols@current})}%
    % now we issue the beamer '\column' command. In order to expand all arguments we first
    % regarding the width, we use the macro 'uulm@cols@col@\number\c@uulm@cols@current'
    % do a 'edef' (expanded definition, with LaTeX protection mechanism):
    \protected@edef\@uulm@cols@tmp{\noexpand%
        % with '<...>' we define the animation of this column
        % counter 'uulm@cols@currentanim' holds the slide, this column should appear on
        % '\uulm@cols@anim@suff' is either '-' (with animation=keep)
        % or empty (with animation=forget)
        % with 'animation=keep' (without reverse) this would be
        % '\column<1->' for the first, '\column<2->' for the second, ...
        \column<\arabic{uulm@cols@currentanim}\uulm@cols@anim@suff>{%
            % the width of the column. For this, we use the 'uulm@cols@col@0', 'uulm@cols@col@1', ... macros
            % defined by '\uulm@cols@initialize@widths'
            \csuse{uulm@cols@col@\arabic{uulm@cols@current}}%
        }%
    }%
    % basically execute the expanded macro (e.g. insert the column)
    \@uulm@cols@tmp
    % update the current animation accordingly (with reverse '\uulm@cols@anim@step@sign' will be '-',
    % without it will be '+') the step '\uulm@cols@anim@step' is 0 for animation=none and probably 1 otherwise.
    % therefore, using 'animation=keep' without reverse, would increment the counter by '+1' (a positive 1)
    \addtocounter{uulm@cols@currentanim}{\uulm@cols@anim@step@sign\uulm@cols@anim@step}%
    % increase the current column counter (e.g. for error checking, and for getting the correct width)
    \stepcounter{uulm@cols@current}%
    \ignorespaces
}

% #1: arguments like 'columns=3, keep, reverse'
\newenvironment{mycolumns}[1][]{\begingroup
\pgfqkeys{/uulm columns}{@defaults, #1}%
\begin{columns}[onlytextwidth,\uulm@cols@valign, \uulm@cols@extra]
    \uulm@cols@init
}{\end{columns}\endgroup}


% ---------------------------------------------
% color boxes
% ---------------------------------------------
\tcbset{%
    % by definig styles, we avoid their replication
    % #1: extra arguments, #2: title, #3: color of the frame, #4: padding
    uulm@basic-boxstyle/.style n args=4{
        title={#2},
        colframe=#3!30,
        coltitle=black,
        before title={\setlength{\parskip}{0ex}\vphantom{/}},
        fonttitle=\bfseries,
        left=#4, right=#4, top=#4, bottom=#4, bottomtitle=-.5mm,
        #1
    },
    % style definition for the normal boxes
    % #1: extra arguments, #2: title, #3: color of the frame and background
    uulm@boxstyle/.style n args=3{uulm@basic-boxstyle={#1}{#2}{#3}{1mm}, colback=#3!10},
    % style definition for their tight variant
    % #1: extra arguments, #2: title, #3: color of the frame
    uulm@tightboxstyle/.style n args=3{uulm@basic-boxstyle={#1}{#2}{#3}{0mm}, colback=white}
}

% #1: name, #2: color
\def\uulm@MakeNewBox#1#2{
    % renew will not work if we define a box that does not already exist in beamer
    % we could check this by \ifcsname #1\endcsname...\else...\fi
    % however, for the moment this is not necessary
    % in the definition #1 and #2 refer to the arguments of \uulm@MakeNewBox
    % while ##1 and ##2 to refer to the arguments passed on to the new tcolorbox.
    % therefore, with '\uulm@MakeNewBox{definition}{orange}', we create a new tcolorbox
    % named 'definition' which wenn called with '\begin{definition}[top=10mm]{My title}...'
    % will result in the option list 'uulm@boxstyle={top=10mm}{My title}{orange}'
    \renewtcolorbox{#1}[2][]{uulm@boxstyle={##1}{##2}{#2}}
    % here, we re-create the old macros (e.g. '\mydefinition')
    % 'capture=minipage' ensures their behavior is similar to the previous one (the default for
    % tcbox would be hbox and no longer fill the width)
    \expandafter\newtcbox\csname my#1\endcsname[2][]{capture=minipage,uulm@boxstyle={##1}{##2}{#2}}
    % now, we do the same for the tight-version of the boxes
    \newtcolorbox{#1tight}[2][]{uulm@tightboxstyle={##1}{##2}{#2}}
    \expandafter\newtcbox\csname my#1tight\endcsname[2][]{capture=minipage,uulm@tightboxstyle={##1}{##2}{#2}}
}

% now we simply define the boxes by name and color
% => \mydefinition and \mydefinitiontight
% furthermore defines the environment \begin{definition}{<title>} ... \end{definition}
\uulm@MakeNewBox{definition}{orange}
% => \myexample and \myexampletight
% furthermore defines the environment \begin{example}{<title>} ... \end{example}
\uulm@MakeNewBox{example}{blue}
% => \mynote and \mynotetight
% furthermore defines the environment \begin{note}{<title>} ... \end{note}
\uulm@MakeNewBox{note}{red}
% ---------------------------------------------

% ---------------------------------------------
% Elias' personal adjustments
% ---------------------------------------------

% ---------------------------------------------
% feature diagrams
% ---------------------------------------------

\clearuniversitylogo

\usepackage{xstring}
\usepackage{forest}
\usepackage{xcolor}

\usetikzlibrary{angles}
\usetikzlibrary{tikzmark}
\definecolor{drawColor}{RGB}{128 128 128}

\newcommand{\circleSize}{0.175em}
\newcommand{\angleSize}{0.75em}

\forestset{
	/tikz/mandatory/.style={
		circle,fill=drawColor,
		draw=drawColor,
		inner sep=\circleSize
	},
	/tikz/optional/.style={
		circle,
		fill=white,
		draw=drawColor,
		inner sep=\circleSize
	},
	featureDiagram/.style={
		for tree={
			text depth = 0,
			parent anchor = south,
			child anchor = north,
			draw = drawColor,
			edge = {draw=drawColor},
		}
	},
	featureDiagramEmpty/.style={
	},
	/tikz/abstract/.style={
		fill = blue!85!cyan!5,
		draw = drawColor
	},
	/tikz/concrete/.style={
		fill = blue!85!cyan!20,
		draw = drawColor
	},
	mandatory/.style={
		edge label={node [mandatory] {} }
	},
	optional/.style={
		edge label={node [optional] {} }
	},
	or/.style={
		tikz+={
			\path (.parent) coordinate (A) -- (!u.children) coordinate (B) -- (!ul.parent) coordinate (C) pic[fill=drawColor, angle radius=\angleSize]{angle};
		}	
	},
	/tikz/or/.style={
	},
	alternative/.style={
		tikz+={
			\path (.parent) coordinate (A) -- (!u.children) coordinate (B) -- (!ul.parent) coordinate (C) pic[draw=drawColor, angle radius=\angleSize]{angle};
		}	
	},
	/tikz/alternative/.style={
	},
	/tikz/placeholder/.style={
	},
	collapsed/.style={
		rounded corners,
		no edge,
		for tree={
			fill opacity=0,
			draw opacity=0,
			l = 0em,
		}
	},
	/tikz/hiddenNodes/.style={
		midway,
		rounded corners,
		draw=drawColor,
		fill=white,
		minimum size = 1.2em,
		minimum width = 0.8em,
		scale=0.9
	},
}

\newcommand{\legend}{
	\matrix [draw=drawColor,anchor=north west] at (current bounding box.north east) {
		\node [label=center:\underline{Legend:}] {}; \\
		\node [abstract,label=right:Abstract Feature] {}; \\
		\node [concrete,label=right:Concrete Feature] {}; \\
		\node [mandatory,label=right:Mandatory] {}; \\
		\node [optional,label=right:Optional] {}; \\
			\filldraw[drawColor] (0.1,0) - +(-0,-0.2) - +(0.2,-0.2)- +(0.1,0);
			\draw[drawColor] (0.1,0) -- +(-0.2, -0.4);
			\draw[drawColor] (0.1,0) -- +(0.2,-0.4);
			\fill[drawColor] (0,-0.2) arc (240:300:0.2);
		\node [or,label=right:Or Group] {}; \\
		\draw[drawColor] (0.1,0) -- +(-0.2, -0.4);
			\draw[drawColor] (0.1,0) -- +(0.2,-0.4);
			\draw[drawColor] (0,-0.2) arc (240:300:0.2);
		\node [alternative,label=right:Alternative Group] {}; \\
	};
}

\newcommand{\featureDiagramWithLegend}[1]{
	\begin{forest}
		featureDiagram[#1]
		\matrix [anchor=north west] at (current bounding box.north east) {
			\node [placeholder] {}; \\
		};
		{\small\legend}
	\end{forest}
}

\newcommand{\featureDiagram}[1]{
	\begin{forest}
		featureDiagram[#1]
	\end{forest}
}

\newcommand{\featureDiagramLegend}{
	\begin{forest}
		featureDiagramEmpty[]
		{\small\legend}
	\end{forest}
}

\newcommand{\featureDiagramOverlay}[1]{
	\begin{tikzpicture}[overlay,remember picture]
		#1
	\end{tikzpicture}
}

\newcommand{\featureEmph}[2][draw=black]{
		\foreach \f in {#2} {
			\node [fit=\f,fill opacity=0.4,line width=0.6pt,rounded corners,#1] {};
		}
}

\newcommand{\featureDeemph}[2][fill=white]{
	\foreach \f in {#2} {
		\node [fit=\f,fill opacity=0.4,line width=0.6pt,rounded corners,#1] {};
	}
}

\newcommand{\featureSelected}[1]{
	\featureEmph[fill=green,draw=green,fill opacity=0.1,draw opacity=0.2]{#1}
}

\newcommand{\featureDeselected}[1]{
	\featureEmph[fill=red,draw=red,fill opacity=0.1,draw opacity=0.2]{#1}
}

% ---------------------------------------------
% code listings
% ---------------------------------------------

\usepackage{listings}
\usepackage[normalem]{ulem}
\tcbuselibrary{listings}

\newcommand{\definelanguage}[2]{
	\lstdefinelanguage{#1}{#2}
	\lstnewenvironment{#1}[1][]{\lstset{language=#1,##1}}{}
	\newtcblisting{#1tight}[2][]{uulm@tightboxstyle={top=-6pt,bottom=-6pt}{##2}{blue},listing only,listing options={language=#1,##1}}
}

% listing style inherited by all languages
\lstset{
	numbers=none, % where to put the line-numbers
	showspaces=false, % show spaces with underscores
	showstringspaces=false, % underline spaces within strings
	showtabs=false, % show tabs within strings with underscores
	tabsize=2, % sets default tabsize to 2 spaces
	breaklines=true, % sets automatic line breaking
	breakatwhitespace=false,
	columns=fullflexible,
	commentstyle=\color{green},
	keywordstyle=\color{blue},
	stringstyle=\color{red},
}

% language-specific styles
\definelanguage{code}{
	moredelim=**[is][\color{red}]{@}{@},
	moredelim=**[is][\color{green}]{?}{?},
	moredelim=**[is][\color{blue}]{~}{~},
	moredelim=[is][\sout]{|}{|},
}

\definelanguage{uvl}{
	alsoletter={=, >, |},
	morekeywords={features, constraints, namespace, mandatory, optional, or, alternative, abstract, =>, |}
}

\definelanguage{dimacs}{
	alsoletter={0},
	morekeywords={p, cnf, 0},
	morecomment=[f]{c},
}

\definelanguage{kconfig}{
	keepspaces=true,
	morekeywords={config, bool, default, if, help, def_bool, depends, on, select},
	morecomment=[f]{\#},
	morestring=*[d]{"},
	literate={-}{{-}}1,
}

\definelanguage{cpp}{
	language=C++,
	moredelim=**[is][\color{green}\bfseries\itshape]{~}{~},
	moredelim=[is][\sout]{|}{|},
}

% ---------------------------------------------
% recurring commands
% ---------------------------------------------

\renewcommand{\emph}[1]{{\color{blue}\textbf{#1}}}

\newcommand{\deutsch}[1]{{\color{blue}(#1)}}
\newcommand{\deutschertitel}[1]{{\tiny\deutsch{#1}}}

\newcommand{\mycite}[1]{``#1''}
\newcommand{\mycitebegin}{``}
\newcommand{\myciteend}{''}
\newcommand{\mytitlesource}[1]{{\tiny\normalfont\mbox{[#1]}}}
\newcommand{\mysource}[1]{\ifthenelse{\equal{#1}{}}{}{\phantom{.}~\hfill~\mytitlesource{#1}}}
\newcommand{\mypage}[1]{, p.~#1}
\newcommand{\mypages}[1]{, pp.~#1}

\newcommand{\todo}[1]{{\color{red}\textbf{[#1]}}}
\newcommand{\fodo}[1]{\todo{\footnote{\todo{#1}}}}
\newcommand{\todots}{\todo{\ldots}}

\newcommand{\sem}[1]{\ensuremath{\llbracket #1 \rrbracket}} % semantics brackets
\newcommand{\pand}{\wedge} % conjunction
\newcommand{\por}{\vee} % disjunction
\newcommand{\pnot}{\neg} % negation
\newcommand{\pequals}{\leftrightarrow} % biconditional
\newcommand{\npequals}{\nleftrightarrow} % exclusive disjunction
\newcommand{\mequals}{\Leftrightarrow} % equivalence (meta-level)
\newcommand{\pimplies}{\rightarrow} % conditional
\newcommand{\mimplies}{\Rightarrow} % implication (meta-level)
\newcommand{\defeq}{\vcentcolon=} % defining equals
\newcommand{\power}[1]{\mathcal{P}(#1)} % power set
\newcommand{\refslide}[1]{\hyperlink{#1}{(see Slide \autoref{#1})}} % link to slide
\newcommand{\fs}[1]{\ensuremath{{\color{green}#1}}} % selected feature
\newcommand{\fd}[1]{\ensuremath{{\color{red}#1}}} % deselected feature
\newcommand{\clause}[1]{\ensuremath{{\color{red}#1}}} % clause in a CNF
\newcommand{\cfg}[3][0]{\ensuremath({{\only<#1>{\color{green}}\{#2\}}, {\only<#1>{\color{red}}\{#3\}})}} % configuration
\newcommand{\notleftright}{\mathrel{\ooalign{$\leftrightarrow$\cr\hidewidth$/$\hidewidth}}}

\usepackage{mathtools}
\DeclarePairedDelimiter\abs{\lvert}{\rvert} % absolute value

\def\checkmark{\tikz\fill[scale=0.4](0,.35) -- (.25,0) -- (1,.7) -- (.25,.15) -- cycle;}

\newcommand{\light}[1]{{\color{lightgray}#1}}
\newcommand{\lightsep}[1]{{\color{lightgray}|}}
\newcommand{\aff}[1]{\texorpdfstring{\light{$^{#1}$}}{}} % affiliation
\newcommand{\affsep}[1]{\texorpdfstring{\light{$^{#1}$,}}{}} % affiliation
\newcommand{\svgsuffix}{} % can be used to load SVG files named <name><suffix>.svg
\newcommand{\pw}{\paperwidth} % slide width
\newcommand{\ph}{\paperheight} % slide height
\newcommand{\lw}{\linewidth} % width of text box
\newcommand{\pic}[2][]{\includegraphics[width=\linewidth,#1]{#2}} % include a picture
\renewcommand{\a}{$\Longrightarrow$\xspace} % draw an arrow
\newcommand{\f}[3][t]{\begin{frame}[#1]{#2}#3\end{frame}} % frame
\newcommand{\backup}{\f[plain,noframenumbering]{}{}} % begin backup slides
\newcommand{\for}[3][\n]{\foreach #1 in {1,...,#2} {#3}} % for loop, useful for including animated images/SVG files named <name><number>.svg
\newcommand{\add}[2]{\the\numexpr#1+#2\relax} % adds two arguments, useful for offsetting animations and positions
\newcommand{\mult}[2]{\the\numexpr#1*#2\relax} % adds two arguments, useful for offsetting animations and positions
\newcommand{\ul}[2][]{\begin{itemize}[#1]\setlength\itemsep{5pt}#2\end{itemize}} % list of items
\newcommand{\ulanim}[2][0]{\ul[<+(#1)->]{#2}} % animated list of items
\newcommand{\li}[1]{\item #1} % list item
\newcommand{\liskip}[1]{\item<.-> #1} % list item that is shown together with the previous list item
\newcommand{\nest}[2][\a]{\ul{\liskip[#1] #2}} % a single nested list item

\usepackage{textpos}
\renewcommand{\b}[5][1-]{\only<#1>{\begin{textblock*}{#4}(#2,#3)#5\end{textblock*}}\def\boxx{#2}\def\boxy{#3}\def\boxwidth{#4}} % text box
\renewcommand{\c}[3][1-]{\b[#1]{\boxx}{\dimexpr\boxy+#2\relax}{\boxwidth}{\centering#3}} % image caption
\newcommand{\img}[8][1-]{\b[#1]{#2}{#3}{#4}{\centering\adjustimage{margin=5pt 0pt 5pt 0pt, max size={#6}{#7},#8}{#5}}} % include image
\renewcommand{\i}[5][1-]{\img[#1]{#2}{#3}{#4}{#5}{\lw}{\lw}{}} % include image, adjusts to text box
\newcommand{\ih}[4][1-]{\img[#1]{0pt}{#2}{.96\pw}{#4}{#3}{.73\ph}{}} % include image such that it fills the slide height
\newcommand{\iw}[4][1-]{\img[#1]{0pt}{#2}{.96\pw}{#4}{\pw}{#3}{}} % include image such that it fills the slide width
\newcommand{\ic}[2][1-]{\img[#1]{0pt}{0pt}{.96\pw}{#2}{\lw}{\lw}{}} % include image such that it fills the slide
\newcommand{\svg}[5][1-]{\b[#1]{#3}{#4}{#5}{\centering\includesvg[inkscapelatex=false,width=\linewidth]{#2\svgsuffix}}} % include SVG files, requires Inkscape
\newcommand{\svgs}[4]{\foreach \file/\num/\off in {#1} {\for{\num}{\svg[\add{\n}{\off}]{\file\n}{#2}{#3}{#4}}}} % include (multiple) SVG animations