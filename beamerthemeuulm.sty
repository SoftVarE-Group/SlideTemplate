% =============================================
% MAIN uulm-THEME
% =============================================

% ---------------------------------------------
% import packages
% ---------------------------------------------
\usepackage[utf8]{inputenc}
\usepackage{xargs} % used to define/renew commands with multiple optional parameters
\usepackage{color}
\usepackage{fitbox} % used to auto-scale long frame titles
\usepackage{tcolorbox} % used for color boxes (definition, example, note)
\usepackage{ifthen}
\usepackage{multicol} % for auto multi-column in content overview
% ---------------------------------------------


% ---------------------------------------------
% general settings
% ---------------------------------------------
\beamertemplatenavigationsymbolsempty % remove the default navigation symbols

\AtEndPreamble{
    \appto\Ginput@path{{../pics/logos/}{../pics/uulm/}{../pics/nature/}}
}

\newif\ifuniqueslidenumbersuffix
\newif\ifsectiontitleslide % for enabling the automatic section title slide at the begin of each section
\newif\ifsectionoverview % for enabling the automatic section overview on the section title slide
\newif\ifdarkmode

\DeclareOption{nosectionframes}{\sectiontitleslidefalse \sectionoverviewfalse}
\DeclareOption{sectiontitleslides}{\sectiontitleslidetrue \sectionoverviewfalse}
\DeclareOption{sectionoverviews}{\sectiontitleslidetrue \sectionoverviewtrue}
\DeclareOption{uniqueslidenumber}{\uniqueslidenumbersuffixtrue}
\DeclareOption{darkmode}{\darkmodetrue}

\ExecuteOptions{sectiontitleslides} % use sectiontitleslides as default
\mode<handout>{\ExecuteOptions{sectionoverviews}} % use sectionoverviews as default in handout mode

\ProcessOptions

\setlength{\parskip}{1.5ex} % set the parskip
\newcommand{\@minipagerestore}{\setlength{\parskip}{1.5ex}} % use parskip also in minipages (also used for tcolorbox)
% ---------------------------------------------


% ---------------------------------------------
% colors
% ---------------------------------------------
% uulm color scheme:
\definecolor{black}{HTML}{000000}
\definecolor{uulmlogoblue}{HTML}{89a2b3}
\definecolor{uulmblue}{HTML}{7D9AAA}
\definecolor{uulmaccent}{HTML}{A9A28D}
\definecolor{green}{HTML}{56AA1C}
\definecolor{red}{HTML}{A32638}
\definecolor{orange}{HTML}{DF6D07}
\definecolor{blue}{HTML}{26547C}

% beamer colors:
\ifdarkmode
\colorlet{green}{green!90!white}
\colorlet{red}{red!90!white}
\colorlet{orange}{orange!90!white}
\colorlet{blue}{blue!90!white}
\colorlet{uulm@text}{white!90!darkgray}
\colorlet{uulm@background}{darkgray}
\colorlet{uulm@boxmix}{darkgray!50!white}
\setbeamercolor{background canvas}{bg=uulm@background}
\setbeamercolor{frametitle}{fg=uulm@text}
\setbeamercolor{structure}{fg=uulm@text}
\setbeamercolor{normal text}{fg=uulm@text}
\setbeamercolor*{palette primary}{use=structure,fg=structure.fg}
\setbeamercolor*{palette secondary}{use=structure,fg=structure.fg!95!black}
\setbeamercolor*{palette tertiary}{use=structure,fg=structure.fg!90!black}
\setbeamercolor*{palette quaternary}{use=structure,fg=structure.fg!95!black,bg=black!80}
\setbeamercolor{item}{fg=uulm@text}
\setbeamercolor{itemize/enumerate body}{use=normal text,fg=normal text.fg}
\setbeamercolor{itemize/enumerate subbody}{use=itemize/enumerate body,fg=itemize/enumerate body.fg}
\setbeamercolor{itemize/enumerate subsubbody}{use=itemize/enumerate subbody,fg=itemize/enumerate subbody.fg}
% overwrite faculty?
%\AtEndPreamble{\setbeamercolor{mypagenumber}{fg=uulm@text,bg=darkgray!40!black}}
\setbeamercolor{logobox}{bg=uulm@text}
\else
\colorlet{uulm@text}{black}
\colorlet{uulm@background}{white}
\colorlet{uulm@boxmix}{white}
\setbeamercolor{frametitle}{fg=black}
\setbeamercolor{item}{fg=black}
\setbeamercolor{section in toc}{fg=black}
\setbeamercolor{subsection in toc}{fg=black}
\setbeamercolor{logobox}{bg=white}
\fi

\setbeamercolor{myfooter}{fg=white,bg=uulmaccent}
\setbeamercolor{mypagenumber}{fg=white,bg=red}
\setbeamercolor{titlebox}{fg=white,bg=red}
\setbeamercolor{subtitlebox}{fg=white,bg=uulmaccent}

\newcommand{\setfaculty}[1]{
    \ifthenelse{\equal{#1}{med}}{\setbeamercolor{mypagenumber}{fg=white,bg=blue}\setbeamercolor{titlebox}{fg=white,bg=blue}}{
        \ifthenelse{\equal{#1}{infIngPsy}}{\setbeamercolor{mypagenumber}{fg=white,bg=red}\setbeamercolor{titlebox}{fg=white,bg=red}}{
            \ifthenelse{\equal{#1}{math}}{\setbeamercolor{mypagenumber}{fg=white,bg=green}\setbeamercolor{titlebox}{fg=white,bg=green}}{
                \ifthenelse{\equal{#1}{nat}}{\setbeamercolor{mypagenumber}{fg=white,bg=orange}\setbeamercolor{titlebox}{fg=white,bg=orange}}{}
            }
        }
    }
}
% ---------------------------------------------


% ---------------------------------------------
% fonts
% ---------------------------------------------
\setbeamerfont{frametitle}{size=\LARGE, series=\bfseries}
\setbeamerfont{section title}{size=\Huge, series=\bfseries}
\setbeamerfont{section in toc}{size=\large, series=\bfseries}

\setbeamerfont{itemize/enumerate subbody}{size=\normalsize}
\setbeamerfont{itemize/enumerate subsubbody}{size=\normalsize}
% ---------------------------------------------


% ---------------------------------------------
% list environments
% ---------------------------------------------
\setbeamertemplate{itemize items}[circle]
\setbeamertemplate{enumerate item}{\arabic{enumi}.}
\setbeamertemplate{enumerate subitem}{\arabic{enumii}.}
\setbeamertemplate{enumerate subsubitem}{\arabic{enumiii}.}
\setbeamertemplate{section in toc}[sections numbered]
% ---------------------------------------------


% ---------------------------------------------
% frame layout
% ---------------------------------------------
% [options for includegraphics]{logoname}
\newcommand*\institutelogo[2][]{\def\@institutelogo{\includegraphics[height=4.5ex,#1]{#2}}}
\newcommand*\clearinstitutelogo{\def\@institutelogo{}}
\newcommand*\universitylogo[2][]{\def\@universitylogo{\includegraphics[height=4.5ex,#1]{#2}}}
\newcommand*\clearuniversitylogo{\def\@universitylogo{}}
\def\@mainlogo{\@institutelogo\hskip0pt plus 1filll\relax\@universitylogo}
\newif\ifuulm@logos@first@
\newcommand*\uulmlogos[2][]{\def\@mainlogo{%
    \uulm@logos@first@true
    \@for\@image:={#2}\do{%
        \ifuulm@logos@first@\uulm@logos@first@false\else \hskip0pt plus 1filll\fi
        \ifthenelse{\equal{\@image}{}}{}{%
            \includegraphics[height=4.5ex,#1]{\@image}%
        }%
    }%
}}
% default for the university, after all, it is the layout of uulm
\universitylogo{uulm}
\clearinstitutelogo

\newcommand{\@createtitleslide}{
    {
    \ifx \uulmtitlepicture \empty \else \usebackgroundtemplate{\includegraphics[trim=0 0 0 \uulmtitlepictureoffset,clip,width=\paperwidth]{\uulmtitlepicture}} \fi
    \begin{frame}[plain]
        \vskip0pt plus 1filll
        \begin{beamercolorbox}[wd=\paperwidth,ht=4.5ex,dp=2ex,right]{titlebox}
            \LARGE\textbf{\inserttitle}\hspace*{20pt}
        \end{beamercolorbox}%
        \nointerlineskip%
        \begin{beamercolorbox}[wd=\paperwidth,ht=2.25ex,dp=1ex,right]{subtitlebox}
            \small
            \ifx \insertsubtitle \empty \else \insertsubtitle\ $\vert$ \fi
            \insertauthor\
            \ifx \insertdate \empty \else $\vert$ \insertdate \fi
            \hspace*{20pt}
        \end{beamercolorbox}%
        \nointerlineskip
        \begin{beamercolorbox}[wd=\paperwidth,ht=4.5ex,dp=2ex,left]{logobox}
            \vspace{-1ex}%
            \hspace{10pt}
            \@mainlogo
            \hspace{10pt}
        \end{beamercolorbox}%
    \end{frame}
    }
}

\renewcommandx{\maketitle}[2][1=apr21-o25a,2=150]{
    \gdef\uulmtitlepicture{#1}
    \gdef\uulmtitlepictureoffset{#2}
    \@createtitleslide
}

\newcommand{\againtitle}{
    \ifcsname uulmtitlepicture\endcsname
        \@createtitleslide
    \else
        \PackageError{beamerthemeuulm}{To use \string\againtitle\space you must first use \string\maketitle!}{Either comment out this line or check if you forgot to issue the \string\maketitle-macro.}%
    \fi
}

\setbeamertemplate{frametitle}{
    \vspace{20pt}%
    \vphantom{/}\setbox0=\hbox{\insertframetitle}%
    \ifdim\wd0<\textwidth
    \insertframetitle
    \else\let\hfill\space\resizebox\linewidth!{\insertframetitle}\fi
}
\ifuniqueslidenumbersuffix
    \def\uulm@page{\insertframenumber\ifnum\insertframestartpage=\insertframeendpage\else\rlap{\color{fg!50!bg}.\insertslidenumber}\fi}
\else
    \def\uulm@page{\insertframenumber}
\fi
\setbeamertemplate{footline}{
    \hypersetup{linkcolor = white}
    %\vspace{20pt}
    \hbox{%
        \begin{beamercolorbox}[wd=0.93\textwidth,ht=3mm,dp=1.5mm,left]{myfooter}
            \hspace{0.03\textwidth}
            \insertshortauthor
            \hfill
            \insertshorttitle\
            \ifx \insertsubtitle \empty \else {-- \insertshortsubtitle} \fi
            \ifx \insertsectionhead \empty \else {-- \thesection.~\insertsectionhead} \fi
            \hspace{0.03\textwidth}
        \end{beamercolorbox}%
        \begin{beamercolorbox}[wd=0.07\textwidth,ht=3mm,dp=1.5mm,center]{mypagenumber}
            \usebeamerfont{page number in head/foot}%
            \uulm@page
        \end{beamercolorbox}%
    }%
}
\define@key{beamerframe}{b}[true]{% set bottom space
  \beamer@frametopskip=0pt plus 1fill\relax%
  \beamer@framebottomskip=20pt\relax%
  \beamer@frametopskipautobreak=\beamer@frametopskip\relax%
  \beamer@framebottomskipautobreak=\beamer@framebottomskip\relax%
}
% ---------------------------------------------


% ---------------------------------------------
% table of contents
% ---------------------------------------------
\ifsectiontitleslide
\AtBeginSection{
    \ifsectionoverview
    \begin{frame}{\thesection.~\insertsection}
        \linespread{.5}
        \vfill
        \tableofcontents[currentsection,hideothersubsections]
    \end{frame}
    \else
    \begin{frame}
        \usebeamerfont{section title}\textbf{\thesection.~\insertsection}
    \end{frame}
    \fi
}
\fi

\newcommand{\contentoverview}{
    \begin{frame}{\inserttitle}
        \linespread{.5}
        \vfill
        \begin{multicols}{2}
            \tableofcontents
        \end{multicols}
    \end{frame}
}

\newcommand{\lectureoverview}{\contentoverview} % deprecated version of \contentoverview, do not use anymore
% ---------------------------------------------


% ---------------------------------------------
% content layout
% ---------------------------------------------
\newcommand{\halfpage}[1]{\partofpage{48}{#1}}

\newcommand{\thirdpage}[1]{\partofpage{31}{#1}}

\usepackage{adjustbox}
\newcommand{\partofpage}[2]{
	\begin{minipage}{0.#1\textwidth}
			\begin{flushleft}
				#2
			\end{flushleft}
	\end{minipage}
}

% corresponds to '\halfpage', however, with the new columns we could use larger values
% (same for thirdnext)
\def\halfnext{.489\textwidth}
% corresponds to '\thirdpage'
\def\thirdnext{.31\textwidth}

\newcommand\leftandright[2]{%
    \halfpage{#1}%
    \hfill
    \halfpage{#2}%
}

\newcommand\leftmiddleandright[3]{%
    \thirdpage{#1}%
    \hfill
    \thirdpage{#2}%
    \hfill
    \thirdpage{#3}%
}

\newcommand\leftthenright[2]{%
    \halfpage{#1}%
    \hfill
    \onslide<2->{\halfpage{#2}}%
}

\newcommand\rightthenleft[2]{
    \onslide<2->{\halfpage{#1}}
    \hfill
    \halfpage{#2}
}

\newcommand\leftmiddlethenright[3]{%
    \thirdpage{#1}%
    \hfill
    \onslide<2->{\thirdpage{#2}}%
    \hfill
    \onslide<3->{\thirdpage{#3}}%
}

\newcommand\rightmiddlethenleft[3]{%
    \onslide<3->{\thirdpage{#1}}%
    \hfill
    \onslide<2->{\thirdpage{#2}}%
    \hfill
    \thirdpage{#3}%
}

\newif\ifrecording % for enabling or disabling recording mode

\newcommand\leftorright[2]{% only works in recording mode
\ifrecording
    \onslide<1>{\halfpage{#1}}%
    \onslide<2>{\hfill}%
    \onslide<3>{\halfpage{#2}}%
\else
    \leftthenright{#1}{#2}%
\fi
}

\newcommand\rightorleft[2]{% only works in recording mode
\ifrecording
    \onslide<3>{\halfpage{#1}}%
    \onslide<2>{\hfill}%
    \onslide<1>{\halfpage{#2}}%
\else
    \rightthenleft{#1}{#2}%
\fi
}

\newcommand\leftmiddleorright[3]{% only works in recording mode
\ifrecording
    \onslide<1>{\thirdpage{#1}}%
    \onslide<2>{\hfill}%
    \onslide<3>{\thirdpage{#2}}%
    \onslide<4>{\hfill}%
    \onslide<5>{\thirdpage{#3}}%
\else
    \leftmiddlethenright{#1}{#2}{#3}%
\fi
}

\newcommand\rightmiddleorleft[3]{% only works in recording mode
\ifrecording
    \onslide<5>{\thirdpage{#1}}%
    \onslide<4>{\hfill}%
    \onslide<3>{\thirdpage{#2}}%
    \onslide<2>{\hfill}%
    \onslide<1>{\thirdpage{#3}}%
\else
    \rightmiddlethenleft{#1}{#2}{#3}%
\fi
}

% here, we configure the defaults
\def\uulm@cols@extra{} % no extra options for the columns environment
% init | step
\def\uulm@cols@animation#1#2{%
    % defines the increment for each step (always positive)
    % you can supply a step greater than 0, allowing for 'empty-animations' between the columns
    \def\uulm@cols@anim@step{#1}%
    % '-' for keep, '' (empty) for forget
    \def\uulm@cols@anim@suff{#2}%
}
\def\uulm@cols@anim@init{1}     % start on the first column
\def\uulm@cols@anim@step@sign{+}% count up (if there is anything to count)
\newdimen\uulm@cols@total@width % holds the column width
\newdimen\uulm@cols@height      % holds the target height of the columns environment (negative for auto)

\def\uulm@cols@widths@max{100}  % the maximum number to be used for widths
% with this, we define the keys that are usable within the optional argument of '\mycolumns'

\def\@uulm@animation@none{\uulm@cols@animation{0}{-}}
\def\@uulm@animation@keep{\uulm@cols@animation{1}{-}}
\def\@uulm@animation@forget{\uulm@cols@animation{1}{}}


\pgfqkeys{/uulm columns}{
  % search also allows to write 'c' instead of 'align/c' etc.
  /uulm columns/.search also = {/uulm columns/align},
  align/c/.code              = \def\uulm@cols@valign{c}, % centered
  align/t/.code              = \def\uulm@cols@valign{t}, % top (baseline)
  align/b/.code              = \def\uulm@cols@valign{b}, % bottom (baseline)
  align/T/.code              = \def\uulm@cols@valign{T}, % top (with height, that is, aligns to the "very-top")
  % with 'width' the user can set the total width to be occupied by the columns
  width/.code                = \def\uulm@cols@target@width{#1},
  % allows to define a preset height (in case of overflowing/changing heights on animations etc.)
  height/.code               = \setlength\uulm@cols@height{#1},
  no height/.style           = { height = -1pt },
  % define the margin between columns
  margin/.code               = \def\uulm@cols@margin{#1},
  % widths={30,20} will give the first column 30%, the next 20%, and the rest (if any) an even share of the remaining 50%
  widths/.code               = \def\uulm@cols@widths{#1},
  % this key is only for users who need to change anything for the underlying columns mechanism
  extra/columns/.code        = \def\uulm@cols@extra{#1},
  % control the number of columns
  columns/.code              = \def\uulm@cols@count{#1},
  % allow for 'animation=...'
  animation/.code            = {%
    \expandafter\ifcsname @uulm@animation@#1\endcsname
        \csname @uulm@animation@#1\endcsname
    \else
        \PackageError{beamerthemeuulm}{The animation '#1' does not exist! Choose either 'keep', 'forget', or 'none'.}%
    \fi
  },
  % comfort variants, just so the user does not have to write 'animation='
  keep/.style                = {animation=keep},
  forget/.style              = {animation=forget},
  % deliberately not offer a comfort-variant for the default (none)
  % reverse animation order by setting the initial animation to the amount of columns and making the step (animation delta
  % per column) negative (\uulm@cols@anim@step@sign controls if the animation goes up (+) or down (-))
  reverse/.code              =  \def\uulm@cols@anim@init{\uulm@cols@count}\def\uulm@cols@anim@step@sign{-},
  % by overwriting the style '/uulm columns/@defaults',
  % the user can change these defaults
  @defaults/.style           = {%
    c, % center align
    no height,
    columns = 2, animation=none, % one column, no animation
    widths = {}, % use default widths (evenly distribute)
    width = \linewidth, %
    % this number was merely chosen to look visually pleasing
    % we could also use the default columnsep of latx,
    margin = 0.035\linewidth
  }
}

% allows to user to overwrite the defaults
\newcommand\setmycolumnsdefault[1]{\pgfqkeys{/uulm columns}{@defaults/.append style={#1}}}

% we need two counters
% 'uulm@cols@current' holds the column we are currently in (starts with 0)
\newcounter{uulm@cols@current}
% 'uulm@cols@currentanim' holds the slide the current column should appear on
\newcounter{uulm@cols@currentanim}
% 'uulm@cols@current' will increment by 1 for each column
% 'uulm@cols@currentanim' may increment similarly (animation without reverse)
% ...                     may decrement by 1      (animation with reverse)
% ...                     may remain constant     (without animation)

% code to be executed at the start of the columns
\newcommand\uulm@cols@init{%
    % reset the counter for the current column
    \setcounter{uulm@cols@current}{0}%
    % initialize the current animation counter with the start animation
    % this is 1 without reverse, and the number of columns if reverse is active
    \setcounter{uulm@cols@currentanim}{\uulm@cols@anim@init}%
    % due to the way beamer calculates the columns, we remove the margin from the width
    % see etoolbox for an explanation of '\dimdef' (basically allows for calculations with dimensions)
    \dimdef{\uulm@cols@total@width}{\linewidth-\uulm@cols@margin*\uulm@cols@count+\uulm@cols@margin}%
    % activate(/overwrite) the '\mynextcolumn' macro within the environment
    \let\mynextcolumn\uulm@mynextcolumn
    % a rather complicated macro, which sets/calculates the widths for all columns
    \uulm@cols@initialize@widths
    % issue the first column
    % NOTE: we don't guard if 'columns' is below 1 (e.g. we always assume, there is 1 column)
    \mynextcolumn
}

% a temporary counter so we do not need to use low-level tex counters (like @tempcnta)
% with '\value{uulm@cols@temp}' we get the numerical value of the counter
% with '\arabic{uulm@cols@temp}' we get the (textual) "number"-value of the counter
\newcounter{uulm@cols@temp}

% the only thing important by this macro are other commands sequences:
% \uulm@cols@col@0, \uulm@cols@col@1, \uulm@cols@col@2, ...
% which hold the total width, column with number 0, 1, 2, ... should occupy
% it uses the total number of columns, the supplied total width of all columns
% and the desired 'widths={...}'. If there are more columns (e.g. widths={30}, columns=3)
% it will automatically distributed the remaining space evenly.
% note, that while we assume the units of 'widths' to be percentages, it is really the
% macro '\uulm@cols@widths@max' which holds the number they should sum up to (i.e. 100)
\newcommand\uulm@cols@initialize@widths{%
    % first of all, we iterate over the given 'widths={...}' (stored within \uulm@cols@widths)
    % we use 'uulm@cols@temp' to count the number of widths supplied
    \setcounter{uulm@cols@temp}{0}%
    % The macro '\uulm@cols@widths@max' holds the desired target which all the supplied widths should sum up to it is
    % probably 100 (therefore, supplying widths={20,10}, would reduce '\uulm@cols@remaining@width' from 100 to 70)
    \let\uulm@cols@remaining@width\uulm@cols@widths@max
    % now we use '@for' which iterates over all widths (comma-separated) stored in '\uulm@cols@widths'
    % the loop variable '\@uulm@cols@width' will hold the current width in each loop
    \@for\@uulm@cols@width:=\uulm@cols@widths\do{%
        % with 'protected@csedef' we (in short) define a new macro but supply its name in terms of another macro
        % this macro name can contain numbers etc.
        % essential, we define '\uulm@cols@col@<current column>' that is, 'widths={20,30}' would create:
        % \uulm@cols@col@0, which holds the calculated value for 20
        % \uulm@cols@col@1, which holds the calculated value for 20
        % See the etoolbox package for an explanation of '\csdimdef'
        \csdimdef{uulm@cols@col@\arabic{uulm@cols@temp}}{%
            % We make math on dimensions. Essentially, we calculate the total width to be occupied
            % by those column (i.e. translating from the percentages of 'widths' to the real dimension)
            \uulm@cols@total@width*\@uulm@cols@width/\uulm@cols@widths@max
            % Example:
            % with '\uulm@cols@total@width' being probably something like '\linewidth' and '\uulm@cols@widths@max' being 100
            % this can be read as: '\linewidth * \@uulm@cols@width/100'
            % Suppose, the current '\@uulm@cols@width' is 20, this would result in '\linewidth * 0.2' or "20% of the width of the line"
        }%
        % now we update the amount of widths left (e.g., when we have '\uulm@cols@remaining@width' as 100 and a '\@uulm@cols@width' of 20,
        % this will reduce the remaining number to 80). See etoolbox for an explanation of numdef
        \numdef\uulm@cols@remaining@width{\uulm@cols@remaining@width-\@uulm@cols@width}%
        % step the counter to move to the width for the next column
        \stepcounter{uulm@cols@temp}%
        % check, if we have too many columns
        \ifnum\value{uulm@cols@temp}>\uulm@cols@count\relax
            \PackageWarning{beamerthemeuulm}{You specified '\uulm@cols@count' columns, but supplied more lengths to widths (\uulm@cols@widths) (page: \thepage, frame: \insertframenumber,\on@line). Reduce the amount of widths supplied or increase the number of columns}%
        \fi
    }%
    % after processing all 'widths={...}' we check, if the user supplied (in sum) more than we have 'e.g., when having percentages (with 100)
    % supplying 'widths={90,20}' would issue this error as we now have a '110%' column
    \ifnum\uulm@cols@remaining@width<0\relax
        \PackageWarning{beamerthemeuulm}{Widths (\uulm@cols@widths) sum up to more than the allowed max '\uulm@cols@widths@max' (page: \thepage, frame: \insertframenumber,\on@line). Please update the supplied widths.}%
    \fi
    % for the remaining columns, distribute remaining width evenly
    % if the user supplied 'columns=5' (stored in \uulm@cols@count) and 'widths={15,30}',
    % this will set '\@uulm@cols@remaining@cols' to 3.
    \edef\@uulm@cols@remaining@cols{\the\numexpr\uulm@cols@count-\value{uulm@cols@temp}}%
    % NOTE: maybe we should notify the user of the even distribution?
    % we only do something, if there is at least one column that the user supplied no width
    \ifnum\@uulm@cols@remaining@cols>0
        % we distribute the width evenly. therefore we calculate the width that remains for each column
        % if there are 60%, and 3 columns remaining, we give each '\uulm@cols@total@width * 0.2' or 20%
        % of the total column width.
        \dimdef\@uulm@cols@remaining@colwidth{%
            \uulm@cols@total@width*%
                % this part of the expression basically calculates the percentage (20%...)
                \uulm@cols@remaining@width/\uulm@cols@widths@max/\@uulm@cols@remaining@cols%
        }%
        % now, we use a while loop to iterate over the remaining columns
        \@whilenum\value{uulm@cols@temp}<\uulm@cols@count\do{% 'while(i < #columns) { ... }
            % we define the '\uulm@cols@col@<current column>'
            % macros holding the width. With 60%, a total width of '\linewidth'
            % and three out of 5 columns remaining, this would define:
            % \uulm@cols@col@2, which holds \linewidth*0.2
            % \uulm@cols@col@3, which holds \linewidth*0.2
            % \uulm@cols@col@4, which holds \linewidth*0.2
            \csedef{uulm@cols@col@\arabic{uulm@cols@temp}}{\@uulm@cols@remaining@colwidth}%
            % increment the counter
            \stepcounter{uulm@cols@temp}% i += 1
        }%
    \fi
}

% this is the macro, that will become '\mynextcolumn' within the 'mycolumns' environment
\newcommand\uulm@mynextcolumn{%
    % issue a warning if too many columns
    \ifnum\value{uulm@cols@current}<\uulm@cols@count\else
        % this mus be an error, we calculate widths etc. only for the given columns
        \PackageError{beamerthemeuulm}{You configured 'columns=\uulm@cols@count', but supplied more (at least \arabic{uulm@cols@current}, page: \thepage, frame: \insertframenumber,\on@line)}{Either remove the command, or choose another Layout}%
    \fi
    % this is a debug statement, that can be used to se the current state within the animation
    % \typeout{Creating col: \the\c@uulm@cols@current\space on slide: \the\c@uulm@cols@currentanim\uulm@cols@anim@suff, page: \thepage\space (width: \csuse{uulm@cols@col@\number\c@uulm@cols@current})}%
    % now we issue the beamer '\column' command. In order to expand all arguments we first
    % regarding the width, we use the macro 'uulm@cols@col@\number\c@uulm@cols@current'
    % do a 'edef' (expanded definition, with LaTeX protection mechanism):
    \protected@edef\@uulm@cols@tmp{\noexpand%
        % with '<...>' we define the animation of this column
        % counter 'uulm@cols@currentanim' holds the slide, this column should appear on
        % '\uulm@cols@anim@suff' is either '-' (with animation=keep)
        % or empty (with animation=forget)
        % with 'animation=keep' (without reverse) this would be
        % '\column<1->' for the first, '\column<2->' for the second, ...
        \column<\arabic{uulm@cols@currentanim}\uulm@cols@anim@suff>{%
            % the width of the column. For this, we use the 'uulm@cols@col@0', 'uulm@cols@col@1', ... macros
            % defined by '\uulm@cols@initialize@widths'
            \csuse{uulm@cols@col@\arabic{uulm@cols@current}}%
        }%
    }%
    % basically execute the expanded macro (e.g. insert the column)
    \@uulm@cols@tmp
    % update the current animation accordingly (with reverse '\uulm@cols@anim@step@sign' will be '-',
    % without it will be '+') the step '\uulm@cols@anim@step' is 0 for animation=none and probably 1 otherwise.
    % therefore, using 'animation=keep' without reverse, would increment the counter by '+1' (a positive 1)
    \addtocounter{uulm@cols@currentanim}{\uulm@cols@anim@step@sign\uulm@cols@anim@step}%
    % increase the current column counter (e.g. for error checking, and for getting the correct width)
    \stepcounter{uulm@cols@current}%
    \ignorespaces
}

% #1: arguments like 'columns=3, keep, reverse'
\newenvironment{mycolumns}[1][]{\begingroup
\pgfqkeys{/uulm columns}{@defaults, #1}%
\edef\uulm@previous@uulm@cols{\theuulm@cols@current}% store the current column counter
\ifdim\uulm@cols@height<0pt\begin{minipage}{\uulm@cols@target@width}\else\begin{minipage}[\uulm@cols@valign][\uulm@cols@height]{\uulm@cols@target@width}\fi%
\begin{columns}[onlytextwidth,\uulm@cols@valign, \uulm@cols@extra]
    \uulm@cols@init
}{\end{columns}\end{minipage}\setcounter{uulm@cols@current}{\uulm@previous@uulm@cols}\endgroup}


% ---------------------------------------------
% color boxes
% ---------------------------------------------
\tcbset{%
    % by definig styles, we avoid their replication
    % #1: extra arguments, #2: title, #3: color of the frame, #4: padding, #5 boxname
    uulm@basic-boxstyle/.style n args=5{
        title={#2},
        colframe=#3!30!uulm@boxmix,
        coltitle=uulm@text,coltext=uulm@text,
        before title={\setlength{\parskip}{0ex}\vphantom{/}\let\boxnumber\thetcbcounter\csname uulm@box@#5@titleprefix\endcsname},
        after title={\let\boxnumber\thetcbcounter\csname uulm@box@#5@titlesuffix\endcsname},
        before upper={\colorlet{uulm@text}{black}\parskip\z@\relax},
        fonttitle=\bfseries,
        left=#4, right=#4, top=#4, bottom=#4, bottomtitle=-.5mm,
        #1
    },
    % style definition for the normal boxes
    % #1: extra arguments, #2: title, #3: color of the frame and background, #4: boxname
    uulm@boxstyle/.style n args=4{uulm@basic-boxstyle={colback=#3!10!uulm@background,#1}{#2}{#3}{1mm}{#4}},
    % style definition for their tight variant
    % #1: extra arguments, #2: title, #3: color of the frame, #4: boxname
    uulm@tightboxstyle/.style n args=4{uulm@basic-boxstyle={colback=uulm@background,#1}{#2}{#3}{0mm}{#4}}
}

% [optional prefix] | name | color | [optional suffix]
\newcommandx\uulm@MakeNewBox[4][1={},4={}]{%
    % in the definition #2 and #3 refer to the arguments of \uulm@MakeNewBox
    % while ##1 and ##2 to refer to the arguments passed on to the new tcolorbox.
    % therefore, with '\uulm@MakeNewBox{definition}{orange}', we create a new tcolorbox
    % named 'definition' which wenn called with '\begin{definition}[top=10mm]{My title}...'
    % will result in the option list 'uulm@boxstyle={top=10mm}{My title}{orange}'
    % first we assure, that we can build this box
    \newtcolorbox[auto counter,reset counter on overlays]{#2}[2][]{uulm@boxstyle={##1}{##2}{uulm@box@#2}{#2}}
    % here, we re-create the old macros (e.g. '\mydefinition')
    % 'capture=minipage' ensures their behavior is similar to the previous one (the default for
    % tcbox would be hbox and no longer fill the width)
    \expandafter\newtcbox\csname my#2\endcsname[2][]{capture=minipage,uulm@boxstyle={##1}{##2}{uulm@box@#2}{#2}}%
    % now, we do the same for the tight-version of the boxes
    \newtcolorbox[use counter from=#2]{#2tight}[2][]{uulm@tightboxstyle={##1}{##2}{uulm@box@#2}{#2}}%
    \expandafter\newtcbox\csname my#2tight\endcsname[2][]{capture=minipage,uulm@tightboxstyle={##1}{##2}{uulm@box@#2}{#2}}%
    % now, get the macros in effect:
    \uulm@UpdateBoxSurround{#2}{#1}{#4}%
    \uulm@UpdateBoxColor{#2}{#3}%
}
% like newBox but does not care if the box does already exist
% [optional prefix] | name | color | [optional suffix]
\newcommandx\uulm@DeclareBox[4][1={},4={}]{\csundef{#2}\csundef{end#2}\csundef{my#2}\csundef{#2tight}\csundef{end#2tight}\csundef{my#2tight}%
\uulm@MakeNewBox[#1]{#2}{#3}[#4]}


% name | prefix | suffix
\def\uulm@UpdateBoxSurround#1#2#3{%
\ifcsname #1\endcsname
    \expandafter\def\csname uulm@box@#1@titleprefix\endcsname{#2}%
    \expandafter\def\csname uulm@box@#1@titlesuffix\endcsname{#3}%
\else
    \PackageError{beamerthemeuulm}{You can not set a box-prefix/-suffix for '#1' because there is no such box!}%
\fi}

\def\uulm@UpdateBoxPrefix#1#2{%
\ifcsname #1\endcsname
    \expandafter\def\csname uulm@box@#1@titleprefix\endcsname{#2}%
\else
    \PackageError{beamerthemeuulm}{You can not set a box-prefix for '#1' because there is no such box!}%
\fi}

\def\uulm@UpdateBoxSuffix#1#2{%
\ifcsname #1\endcsname
    \expandafter\def\csname uulm@box@#1@titlesuffix\endcsname{#2}%
\else
    \PackageError{beamerthemeuulm}{You can not set a box-suffix for '#1' because there is no such box!}%
\fi}


\def\uulm@UpdateBoxColor#1#2{%
\ifcsname #1\endcsname
    \colorlet{uulm@box@#1}{#2}%
\else
    \PackageError{beamerthemeuulm}{You can not change the color for '#1' to '#2' because there is no such box!}
\fi}

\let\MakeNewBox\uulm@MakeNewBox
\let\DeclareBox\uulm@DeclareBox
\let\UpdateBoxColor\uulm@UpdateBoxColor
\let\UpdateBoxPrefix\uulm@UpdateBoxPrefix
\let\UpdateBoxSuffix\uulm@UpdateBoxSuffix
\let\UpdateBoxSurround\uulm@UpdateBoxSurround

% now we simply define the boxes by name and color
% => \mydefinition and \mydefinitiontight
% furthermore defines the environment \begin{definition}{<title>} ... \end{definition}
\uulm@DeclareBox{definition}{orange}
% => \myexample and \myexampletight
% furthermore defines the environment \begin{example}{<title>} ... \end{example}
\uulm@DeclareBox{example}{blue}
% => \mynote and \mynotetight
% furthermore defines the environment \begin{note}{<title>} ... \end{note}
\uulm@DeclareBox{note}{red}
% ---------------------------------------------